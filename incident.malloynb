>>>malloy
source: incident is duckdb.table('UAC_SIR_NOTIFICATION_LIST_DATA_TABLE.csv') extend{
  dimension:
  -- create_date is strptime!date(`DATE_CREATED`, '%B %d %Y') 
 notify_date is try_strptime!date(`DATE_NOTIFIED`, '%m/%d/%-y %H:%M')
   --notify_date is `DATE_NOTIFIED`::date

}
source: abuse_id is duckdb.table('./LIST_ABUSE_ALLEGATIONS_DATA_TABLE.csv') extend{
 primary_key:ABUSE_TYPE_ID
}
source: abuse_allegation is duckdb.table('./SIR_ABUSE_ALLEGATIONS_DATA_TABLE.csv') extend{
 join_one:abuse_id with ABUSE_TYPE_ID
}
source: mm_id is duckdb.table('./LIST_SIR_MM_ISSUES_DATA_TABLE.csv') extend{
 primary_key:MEDICAL_MENTAL_ISSUE_ID
}
source: mm_allegation is duckdb.table('./SIR_MEDICAL_MENTAL_ISSUES_DATA_TABLE.csv') extend{
 join_one:mm_id with MEDICAL_MENTAL_ISSUE_ID
}
source: cate is duckdb.table('./LIST_PROGRAMS_DATA_TABLE.csv') extend{
primary_key:PROGRAM_ID
}
source: program_allegation is duckdb.table('./PROGRAM_LEVEL_EVENTS_INFO_DATA_TABLE.csv') extend{
 join_one:cate with PROGRAM_ID
}

source: sir_event_data is duckdb.table('./UAC_SIR_EVENT_DATA_TABLE.csv') extend{
dimension:
creation_date is try_strptime!date(`DATE_CREATED`, '%m/%d/%-y %H:%M')
join_one:cate with PROGRAM_ID
}
source: category_id_table is duckdb.table('./UAC_SIR_CATEGORY_DATA_TABLE.csv') extend{
primary_key:CATEGORY_ID
}
source: category_map_data is duckdb.table('./UAC_SIR_CATEGORY_MAP_DATA_TABLE.csv') extend{
join_one:category_id_table with CATEGORY_ID
}




>>>markdown
1. Count incidents by agency_Bar chart
>>>malloy
# bar_chart
run: incident -> {
    group_by: AGENCY_TITLE
    aggregate: num_incidents is count()
    order_by: num_incidents desc
}
>>>markdown
2. Incidents by Notification List Subtype_Line chart
>>>malloy
# bar_chart
run: incident -> {
  group_by: NOTIFICATION_LIST_TYPE_SUB
  aggregate: incident_count is count()
}
>>>markdown
3. Incidents by Notification Method_Bar chart
>>>malloy
# bar_chart
run: incident -> {
  group_by: METHOD_OF_NOTIFICATION
  aggregate: incident_count is count()
}
>>>markdown
4. Abuse type allocation_Bar chart
>>>malloy
# bar_chart
run: abuse_allegation -> {
    --group_by: NAICS_SP
    --group_by:notify_date
    --group_by:ABUSE_TYPE_ID
    group_by:abuse_id.ABUSE_TYPE
    --group_by:METHOD_OF_NOTIFICATION
    --group_by:METHOD_OF_NOTIFICATION
    aggregate:num_incident is count()
}
>>>markdown
5. Program level case allocation_ Bar chart
>>>malloy
# bar_chart
run: program_allegation -> {
    group_by:cate.PROGRAM_NAME
    group_by:cate.STATE
    aggregate:num_incident is count()
}
>>>markdown
6. Count total incidents recorded
>>>malloy
run: incident -> {
    aggregate: total_incidents is count()
}
>>>markdown
7. Incidents by Notification List Subtype
>>>malloy
run: incident -> {
  group_by: NOTIFICATION_LIST_TYPE_SUB
  aggregate: incident_count is count()
}
>>>markdown
8. Count incidents by agency
>>>malloy
run: incident -> {
    group_by: AGENCY_TITLE
    aggregate: num_incidents is count()
    order_by: num_incidents desc
}
>>>markdown
9. Top 5 agencies with the highest number of incidents
>>>malloy
run: incident -> {
    group_by: AGENCY_TITLE
    aggregate: num_incidents is count()
    order_by: num_incidents desc
    limit: 5
}
>>>markdown
10. Which agency help the most of the cases?
>>>malloy
run: incident -> {
    --group_by: NAICS_SP
    --group_by:notify_date
    group_by:AGENCY_TITLE
    --group_by:METHOD_OF_NOTIFICATION
    --group_by:METHOD_OF_NOTIFICATION
    aggregate:num_incident is count()
    limit:1
}
>>>markdown
11. Case group by capacity
>>>malloy
run: cate -> {
    --group_by: NAICS_SP
    --group_by:notify_date
    group_by:CAPACITY
    --group_by:METHOD_OF_NOTIFICATION
    --group_by:METHOD_OF_NOTIFICATION
    aggregate:num_incident is count()
}
>>>markdown
12. Case group by active status
>>>malloy
run: cate -> {
    --group_by: NAICS_SP
    --group_by:notify_date
    group_by:ISACTIVE
    --group_by:METHOD_OF_NOTIFICATION
    --group_by:METHOD_OF_NOTIFICATION
    aggregate:num_incident is count()
}
>>>markdown
13. How many incidents in those 5 categories?
>>>malloy
run: abuse_allegation -> {
    --group_by: NAICS_SP
    --group_by:notify_date
    --group_by:ABUSE_TYPE_ID
    group_by:abuse_id.ABUSE_TYPE
    --group_by:METHOD_OF_NOTIFICATION
    --group_by:METHOD_OF_NOTIFICATION
    aggregate:num_incident is count()
}
>>>markdown
14. Case group by medical or mental issue
>>>malloy
run: mm_allegation -> {
    --group_by: NAICS_SP
    --group_by:notify_date
    --group_by:ABUSE_TYPE_ID
    group_by:mm_id.MEDICAL_MENTAL_ISSUE
    --group_by:METHOD_OF_NOTIFICATION
    --group_by:METHOD_OF_NOTIFICATION
    aggregate:num_incident is count()
}
>>>markdown
15. Where did those program level incidents happened?
>>>malloy
run: program_allegation -> {
    group_by:cate.PROGRAM_NAME
    group_by:cate.STATE
    aggregate:num_incident is count()
}
>>>markdown
16. Program level case group by mail state & program name
>>>malloy
run: program_allegation -> {
    group_by:cate.PROGRAM_NAME
    group_by:cate.MAIL_STATE
    aggregate:num_incident is count()
}
>>>markdown
17. Program level case only group by mail state
>>>malloy
run: program_allegation -> {
    --group_by:cate.PROGRAM_NAME
    group_by:cate.MAIL_STATE
    aggregate:num_incident is count()
}
>>>markdown
18. program level event group by creation date
>>>malloy
run: sir_event_data -> {
    group_by:cate.PROGRAM_NAME
    group_by:creation_date.year
    --group_by:program_allegation.SPECIFY_CATEGORY
    aggregate:num_incident is count()
}
>>>markdown
19. Accidents location group by description
>>>malloy
run: category_map_data -> {
    group_by:category_id_table.DESCRIPTION
    group_by:CATEGORY_ID
    order_by:CATEGORY_ID asc
    --group_by:program_allegation.SPECIFY_CATEGORY
    aggregate:num_incident is count()
}
>>>markdown
20. Accidents location group by description and order by amount
>>>malloy
run: category_map_data -> {
    group_by:category_id_table.DESCRIPTION
    group_by:CATEGORY_ID
    --group_by:SIR_ID
    aggregate:num_incident is count()
    order_by:num_incident desc
}
>>>markdown
21. Incidents by User Created
>>>malloy
run: incident -> {
  group_by: USER_CREATED
  aggregate: incident_count is count()
}
>>>markdown
22. Incidents by Uptime
>>>malloy
run: incident -> {
  group_by: UPTIME
  aggregate: incident_count is count()
}
>>>markdown
23. Incidents by Upuser
>>>malloy
run: incident -> {
  group_by: UPUSER
  aggregate: incident_count is count()
}
>>>markdown
24. Incidents by Deletion Status
>>>malloy
run: incident -> {
  group_by: ISDELETED
  aggregate: incident_count is count()
}
>>>markdown
25. Incidents by Addendum ID
>>>malloy
run: incident -> {
  group_by: ADDENDUM_ID
  aggregate: incident_count is count()
}
>>>markdown
26. Incidents by Follow-up Report ID
>>>malloy
run: incident -> {
  group_by: SA_FOLLOWUP_RPT_ID
  aggregate: incident_count is count()
}
>>>markdown
27. Incidents by Other Explain
>>>malloy
run: incident -> {
  group_by: OTHER_EXPLAIN
  aggregate: incident_count is count()
}
>>>markdown
28. Incidents by Display Order
>>>malloy
run: incident -> {
  group_by: DISPLAY_ORDER
  aggregate: incident_count is count()
}
>>>markdown
29. Incidents by Notification List ID
>>>malloy
run: incident -> {
  group_by: NOTIFICATION_LIST_ID
  aggregate: incident_count is count()
}
>>>markdown
30. Incidents by UAC SIR ID
>>>malloy
run: incident -> {
  group_by: UAC_SIR_ID
  aggregate: incident_count is count()
}
>>>markdown
31. Incidents by Date Created
>>>malloy
run: incident -> {
  group_by: DATE_CREATED
  aggregate: incident_count is count()
}
>>>markdown
32. Common staff responses in program events
>>>malloy
run: program_allegation -> {
  group_by: STAFF_RESPONSE
  aggregate: event is count()
  order_by: event desc
}
>>>markdown
33. Programs with state case numbers assigned
>>>malloy
run: program_allegation -> {
  where: STATE_CASE_NUMBER IS NOT NULL
  group_by: PROGRAM_ID
  aggregate: event is count()
}
>>>markdown
34. Programs with law case numbers assigned
>>>malloy
run: program_allegation -> {
  where: LAW_CASE_NUMBER IS NOT NULL
  group_by: PROGRAM_ID
  aggregate: event is count()
}
>>>markdown
35. Programs with most evacuations
>>>malloy
run: program_allegation -> {
  where: IS_EVACUATED = 1
  group_by: PROGRAM_ID
  aggregate: event is count()
}
>>>markdown
36. Programs with most injury-related incidents
>>>malloy
run: program_allegation -> {
  where: IS_INJURED = 1
  group_by: PROGRAM_ID
  aggregate: event is count()
}
>>>markdown
37. Most active users in program events (updates)
>>>malloy
run: program_allegation -> {
  group_by: USER_UPDATED
  aggregate: event is count()
  order_by: event desc
}
>>>markdown
38. Most active users in program events (creation)
>>>malloy
run: program_allegation -> {
  group_by: USER_CREATED
  aggregate: event is count()
  order_by: event desc
}
>>>markdown
39. Event updates by user in programs
>>>malloy
run: program_allegation -> {
  group_by: USER_UPDATED, PROGRAM_ID
  aggregate: update_count is count()
}
>>>markdown
40. Event creation by user in programs
>>>malloy
run: program_allegation -> {
  group_by: USER_CREATED, PROGRAM_ID
  aggregate: event_count is count()
}